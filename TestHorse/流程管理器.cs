using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static HorseRace.数据表;

namespace HorseRace
{
    internal class 流程管理器
    {
        // 比赛的初始化
        public static void 比赛初始化()
        {
            foreach (马 当前马 in 当前比赛.参赛马)
            {
                // 随机干劲
                当前马.干劲 = 工具.随机.Next(5);
                float 干劲系数 = 干劲配置表[当前马.干劲].基础属性系数;
                // 决定跑法，目前先随机
                // 随机算法为，往权重池中添加适性等级的平方数量的跑法，然后随机抽
                // 举例说，距离适性A意味着(6^2=36)权重，G则是(0^2=0)
                // Range0~3，对应逃~差
                List<int> 跑法权重池 = Enumerable.Range(0, 4)
                    .SelectMany(i => Enumerable.Repeat(i, (int)Math.Pow(当前马.跑法适性[i], 2))).ToList();
                当前马.跑法 = 工具.随机取一(跑法权重池);

                // 计算初始属性
                // 调整后速度值 = 基础速度 * 赛道加成 + 场地状况调整 + 育成模式加值
                // 调整后耐力值 = 基础耐力 * 育成模式加值
                // 调整后力量值 = 基础力量 + 场地状况调整 + 育成模式加值
                // 调整后根性值 = 基础根性 + 育成模式加值
                // 调整后智力值 = 基础智力 * 跑法系数 + 育成模式加值

                int 场地速度调整值 = 场地状况调整配置表[当前比赛.场地状况].泥地速度调整;
                int 场地力量调整值 = 场地状况调整配置表[当前比赛.场地状况].泥地力量调整;
                if (当前比赛.是草地)
                {
                    场地速度调整值 = 场地状况调整配置表[当前比赛.场地状况].草地速度调整;
                    场地力量调整值 = 场地状况调整配置表[当前比赛.场地状况].草地力量调整;
                }
                //float 跑法系数 = 1;
                //switch (当前马.跑法)
                //{
                //    default:
                //        break;
                //}

                当前马.速度.基础属性 = 干劲系数 * 当前马.基础速度 + 场地速度调整值;
                当前马.力量.基础属性 = 干劲系数 * 当前马.基础力量 + 场地力量调整值;
                当前马.耐力.基础属性 = 干劲系数 * 当前马.基础耐力;
                当前马.意志.基础属性 = 干劲系数 * 当前马.基础意志;
                // TODO：读取跑法系数
                当前马.智力.基础属性 = 干劲系数 * 当前马.基础智力 * 跑法智力修正[当前马.跑法适性[当前马.跑法]];

                // TODO: 根据基础智力（受干劲影响）检定技能是否可以发动
                // TODO: 发动被动技能

                // 计算出闸延迟
                当前马.出闸延迟 = (float)工具.随机.NextDouble();
                // TODO: 计算是否在2~9段焦躁

                // 根据耐力算出体力
                // 最大体力值 = 跑法系数 * 耐力属性 + 赛道长度
                当前马.体力上限 = 跑法配置表[当前马.跑法].体力系数 * 当前马.耐力.最终属性 + 当前比赛.总长度;
                当前马.当前体力 = 当前马.体力上限;

                // 设置初始速度
                当前马.当前速度.基础属性 = 3;
                // 起跑冲刺
                当前马.当前加速度.修正组.Add(new 属性修正
                {
                    优先级 = 100,
                    标签组 = new[] { "起跑冲刺" }.ToList(),
                    是加算 = true,
                    修正值 = 24,
                    剩余持续时间 = -1
                });
            }



        }

        // 每0.05秒调用，相当于每秒20逻辑帧
        public static void 逻辑帧()
        {
            foreach (马 当前马 in 当前比赛.参赛马)
            {
                // 检查弯道是否结束
                // 检查技能发动

                // 异常状态更新
                foreach (var item in 当前马.状态)
                {
                    item.运行时();
                }

                // 如果在冲刺阶段，更新冲刺状态

                // 更新目标速度
                // 目标速度 = 基础目标速度 * 位置意识系数 + 初始并道加成 + 技能调整值 + 坡道调整值 + 变道加成
                当前马.目标速度.基础属性 = 当前马.获取基础目标速度();
                if (当前马.目标速度.基础属性 > 30)
                {
                    当前马.目标速度.基础属性 = 30;
                }

                if (当前马.当前速度.最终属性 <= 当前马.目标速度.基础属性)
                {
                    // 计算加速度
                    // 加速度 = 基础加速度(平常0.0006，上坡0.0004) * 根号(500 * 力量属性) * 跑法阶段系数 * 场地适应性系数 * 距离适应性系数 + 技能调整值 + 起跑冲刺加值
                    当前马.当前加速度.基础属性 = 当前马.获取加速度();
                }
                else
                {
                    // 计算减速度
                    // 序盘-1.2 中盘-0.8 终盘-1.0 放缓-0.5 体力耗尽-1.2
                    if (当前马.当前体力 > 0)
                    {
                        switch (当前马.当前阶段)
                        {
                            case 0:
                                当前马.当前加速度.基础属性 = -1.2f;
                                break;
                            case 1:
                                当前马.当前加速度.基础属性 = -0.8f;
                                break;
                            case 2:
                                当前马.当前加速度.基础属性 = -1.0f;
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        当前马.当前加速度.基础属性 = -1.2f;
                    }
                }
                

                

                // 更新速度
                当前马.当前速度.基础属性 += 当前马.当前加速度.最终属性 * 一帧时间;
                if (当前马.当前速度.基础属性 < 当前马.最低速度)
                {
                    当前马.当前速度.基础属性 = 当前马.最低速度;
                }
                //if (当前马.当前速度.基础属性 < 当前马.最低速度)
                //{
                //    // TODO: 一个异能，添加一个一帧时间的修正到速度属性，加值为最终属性和最低速度的差值
                //    当前马.当前速度.修正组.Add(new 属性修正
                //    {
                //        标签组 = new[] { "最低速度" }.ToList(),
                //        优先级 = 100,
                //        是加算 = true,
                //        修正值 = 当前马.最低速度 - 当前马.当前速度.最终属性,
                //        剩余持续时间 = 一帧时间
                //    });
                //}
                // 如果速度达到0.85*赛道基准速度，移除起跑冲刺，这个逻辑将来写在异能里
                if (当前马.当前速度.最终属性 > 0.85 * 当前比赛.赛道基准速度)
                {
                    for (int i = 0; i < 当前马.当前加速度.修正组.Count; i++)
                    {
                        if (当前马.当前加速度.修正组[i].标签组.Contains("起跑冲刺"))
                        {
                            当前马.当前加速度.修正组.RemoveAt(i);
                            工具.打印($"{当前马.名称}结束了[起跑冲刺]");
                            break;
                        }
                    }
                }

                // 计算行进距离
                当前马.已行进距离 += 当前马.当前速度.最终属性 * 一帧时间;
                当前马.用时 += 一帧时间;
                // 更新比赛阶段


                // 体力消耗
                // 体力每秒消耗：20 * (当前速度 - 赛道基准速度 + 12)的平方 / 12的平方 * 状态调整值 * 场地状况调整值 * 意志系数
                // 状态调整值： 焦躁1.6 放缓模式0.6 下坡模式0.4
                // 意志系数： 序盘和终盘1 终盘和冲刺(1 + 200 / 根号(600 * 意志))
                float 意志系数 = 1;
                if (当前马.当前阶段 > 1)
                {
                    意志系数 += Convert.ToSingle(200 / Math.Sqrt(600 * 当前马.意志.最终属性));
                }
                当前马.当前体力 -= Convert.ToSingle(20 * Math.Pow(当前马.当前速度.最终属性 - 当前比赛.赛道基准速度 + 12, 2) / 144) * 意志系数 * 一帧时间;
                if (当前马.当前体力 <= 0)
                {
                    当前马.当前体力 = 0;
                }

                // 检查坡道
                // 检查弯道是否开始

                // 回显
                工具.打印($"{当前马.名称}速度{当前马.当前速度.最终属性}，进度{当前马.已行进距离}米");

                // 属性修正更新
                当前马.属性更新();
            }
        }
    }
}

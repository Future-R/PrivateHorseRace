using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static HorseRace.数据表;

namespace HorseRace
{
    internal class 管理器
    {
        // 比赛的初始化
        public static void 比赛初始化()
        {
            foreach (马 当前马 in 当前比赛.参赛马)
            {
                // 随机干劲
                当前马.干劲 = 工具.随机.Next(5);
                float 干劲系数 = 干劲配置表[当前马.干劲].基础属性系数;
                // 决定跑法，目前先随机
                // 随机算法为，往权重池中添加适性等级-1的平方数量的跑法，然后随机抽
                // 举例说，距离适性A意味着((7-1)^2=36)权重，G则是((1-1)^2=0)
                // Range0~3，对应逃~差
                List<int> 跑法权重池 = Enumerable.Range(0, 4)
                    .SelectMany(i => Enumerable.Repeat(i, (int)Math.Pow(当前马.跑法适性[i] - 1, 2))).ToList();
                当前马.跑法 = 工具.随机取一(跑法权重池);

                // 计算初始属性
                // 调整后速度值 = 基础速度 * 赛道加成 + 场地状况调整 + 育成模式加值
                // 调整后耐力值 = 基础耐力 * 育成模式加值
                // 调整后力量值 = 基础力量 + 场地状况调整 + 育成模式加值
                // 调整后根性值 = 基础根性 + 育成模式加值
                // 调整后智力值 = 基础智力 * 跑法系数 + 育成模式加值

                int 场地速度调整值 = 场地状况调整配置表[当前比赛.场地状况].泥地速度调整;
                int 场地力量调整值 = 场地状况调整配置表[当前比赛.场地状况].泥地力量调整;
                if (当前比赛.是草地)
                {
                    场地速度调整值 = 场地状况调整配置表[当前比赛.场地状况].草地速度调整;
                    场地力量调整值 = 场地状况调整配置表[当前比赛.场地状况].草地力量调整;
                }
                //float 跑法系数 = 1;
                //switch (当前马.跑法)
                //{
                //    default:
                //        break;
                //}

                当前马.速度.基础属性 = 干劲系数 * 当前马.基础速度 + 场地速度调整值;
                当前马.力量.基础属性 = 干劲系数 * 当前马.基础力量 + 场地力量调整值;
                当前马.耐力.基础属性 = 干劲系数 * 当前马.基础耐力;
                当前马.意志.基础属性 = 干劲系数 * 当前马.基础意志;
                // TODO：读取跑法系数
                当前马.智力.基础属性 = 干劲系数 * 当前马.基础智力 * 跑法智力修正[当前马.跑法适性[当前马.跑法]];

                // TODO: 根据基础智力（受干劲影响）检定技能是否可以发动
                // TODO: 发动被动技能

                // 计算出闸延迟
                当前马.出闸延迟 = (float)工具.随机.NextDouble();
                // TODO: 计算是否在2~9段焦躁

                // 根据耐力算出体力
                // 最大体力值 = 跑法系数 * 耐力属性 + 赛道长度
                当前马.体力上限 = 跑法配置表[当前马.跑法].体力系数 * 当前马.耐力.最终属性 + 当前比赛.总长度;

                // 设置初始速度
                当前马.当前速度.基础属性 = 3;
                // 起跑冲刺
                当前马.当前加速度.修正组.Add(new 属性修正
                {
                    优先级 = 100,
                    标签组 = new[] { "起跑冲刺" }.ToList(),
                    是加算 = true,
                    修正值 = 24,
                    剩余持续时间 = -1
                });
            }



        }

        // 每0.05秒调用，相当于每秒20逻辑帧
        public static void 逻辑帧()
        {
            // 检查弯道是否结束
            // 检查技能发动
            // 如果在冲刺阶段，更新冲刺状态
            // 更新目标速度
            // 计算加速度
            // 更新比赛阶段
            // 计算行进距离
            // 检查坡道
            // 检查弯道是否开始
        }
    }
}
